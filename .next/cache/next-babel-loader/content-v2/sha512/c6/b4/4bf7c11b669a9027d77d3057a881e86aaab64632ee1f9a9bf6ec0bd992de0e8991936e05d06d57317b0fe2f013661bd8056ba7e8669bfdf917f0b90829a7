{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dnguyen/Developer/meetup/pages/[meetupId]/index.js\";\nimport React from 'react';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetailPage = props => {\n  console.log('MeetupDetailPage:', props);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.meetupData.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      alt: props.meetupData.title,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb://localhost:27017/meetups');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    meetupId\n  } = context.params;\n  const client = await MongoClient.connect('mongodb://localhost:27017/meetups');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n};\nexport default MeetupDetailPage;","map":{"version":3,"sources":["/Users/dnguyen/Developer/meetup/pages/[meetupId]/index.js"],"names":["React","MongoClient","ObjectId","Head","MeetupDetail","MeetupDetailPage","props","console","log","meetupData","title","description","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { MongoClient, ObjectId } from 'mongodb';\nimport Head from 'next/head';\n\nimport MeetupDetail from '../../components/meetups/MeetupDetail';\n\nconst MeetupDetailPage = (props) => {\n  console.log('MeetupDetailPage:', props);\n  return (\n    <React.Fragment>\n      <Head>\n        <title>{props.meetupData.title}</title>\n        <meta name='description' content={props.meetupData.description} />\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        alt={props.meetupData.title}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </React.Fragment>\n  );\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb://localhost:27017/meetups');\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() }\n    }))\n  };\n};\n\nexport const getStaticProps = async (context) => {\n  const { meetupId } = context.params;\n\n  const client = await MongoClient.connect('mongodb://localhost:27017/meetups');\n  const db = client.db();\n\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n\n  client.close();\n\n  return {\n    props: {\n      meetupData: {\n        id: selectedMeetup._id.toString(),\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        image: selectedMeetup.image,\n        description: selectedMeetup.description\n      }\n    }\n  };\n};\n\nexport default MeetupDetailPage;\n"]},"metadata":{},"sourceType":"module"}